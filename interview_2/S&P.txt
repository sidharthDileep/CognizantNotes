class Employee {
    Integer empId;
    String empName;
    Long salary;
    String email;
    Department department;
    Employee(Integer empId,
             String empName,
             Long salary,
             String email,
             Department department) {
        this.empId = empId;
        this.empName = empName;
        this.salary = salary;
        this.email = email;
        this.department = department;
    }
}

class Department {
    Integer deptId;
    String departmentName;
    Department(Integer deptId,
               String departmentName) {
        this.deptId = deptId;
        this.departmentName = departmentName;
    }
}
public class StreamExamples {
    public static void main(String args[]) {
        Department hrDept = new Department(1, "HR");
        Department corpDept = new Department(2, "CORP");
        Department itDept = new Department(3, "IT");
        Map<Integer, Employee> empMap = new HashMap<>();
        empMap.put(1, new Employee(1, "Harsh", 1000L, "Harsh@gmail.com", hrDept));
        empMap.put(2, new Employee(2, "Harshita", 2000L, "Harshitha@gmail.com", hrDept));
        empMap.put(3, new Employee(3, "Harshad", 1000L, "Harshad@gmail.com", hrDept));
        empMap.put(4, new Employee(4, "Harshneeta", 4000L, "Harshneeta@gmail.com", hrDept));
        empMap.put(5, new Employee(5, "Harshal", 2000L, "Harshal@gmail.com", hrDept));
        empMap.put(6, new Employee(6, "Harshali", 3000L, "Harshali@gmail.com", hrDept));
        empMap.put(11, new Employee(11, "Harshi", 1000L, "Harsh@gmail.com", corpDept));
        empMap.put(12, new Employee(12, "Harshita", 2000L, "Harshitha@gmail.com", corpDept));
        empMap.put(13, new Employee(13, "Harshad", 1000L, "Harshad@gmail.com", corpDept));
        empMap.put(14, new Employee(14, "Harshneeta", 4000L, "Harshneeta@gmail.com", itDept));
        empMap.put(15, new Employee(15, "Harshal", 2000L, "Harshal@gmail.com", itDept));
        empMap.put(16, new Employee(16, "Harshali", 3000L, "Harshali@gmail.com", itDept));
	highestSalaryInEachDepartment(empMap);
    }
 
public static void highestSalaryInEachDepartment(Map<Integer, Employee> empMap) {
       /*
	Insert code here.
       */
	Map<Department, List<Employee>> map = empMap.valueSet().stream().collect(Collectors.groupingBy(emp -> Employee::getDepartment, emp));


 	map.entrySet().forEach((k, v) -> {
			System.out.println("Highest salary in " + k + " is" + v.get(0).salary);
			});
    }
}
Find the  highest salary paid  in each department for all departments using streams from empMap. [Write code for highestSalaryInEachDepartment() method.]
Expected Output:
Highest salary in CORP is 2000
Highest salary in IT is 4000
Highest salary in HR is 4000


Consider a scenario you are having students and subjects in a school and they are many to many mappings, 
how many tables need to be created.
Based on the same scenario write a query to fetch the subjects for a particular student based on his name.

SELECT sub FROM STUDENT stu JOIN SUBJECT sub WHERE stu.id = sub.student_id

how do we call procedures in spring boot?

can we override default methods and static methods in java?

when do we use abstract classes over interface?

when we need microservice be so reliable without any failure, what mechanism we will use?

what happens in Collections.stream().forEach() ans Collections.forEach()?




















